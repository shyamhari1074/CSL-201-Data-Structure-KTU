
#include <stdio.h>
#include <stdlib.h>

struct node {
    int val;
    struct node *link;
};

struct node *head = NULL;
int value;

void Insert_Begin() {
    struct node *temp = (struct node*)malloc(sizeof(struct node));
    if (!temp) {
        printf("Memory overflow\n");
        return;
    }

    printf("Enter the element to insert: ");
    scanf("%d", &value);
    temp->val = value;
    temp->link = head;
    head = temp;
}

void Insert_End() {
    struct node *temp = (struct node*)malloc(sizeof(struct node));
    if (!temp) {
        printf("Memory overflow\n");
        return;
    }

    printf("Enter the element to insert: ");
    scanf("%d", &value);
    temp->val = value;
    temp->link = NULL;

    if (head == NULL) {
        head = temp;
    } else {
        struct node *ptr = head;
        while (ptr->link != NULL) {
            ptr = ptr->link;
        }
        ptr->link = temp;
    }
}

void Insert_AnyPos() {
    int key;
    printf("Enter the element to insert: ");
    scanf("%d", &value);
    printf("Enter the value after which to insert: ");
    scanf("%d", &key);

    struct node *ptr = head;
    while (ptr != NULL && ptr->val != key) {
        ptr = ptr->link;
    }

    if (ptr == NULL) {
        printf("Value not found\n");
        return;
    }

    struct node *temp = (struct node*)malloc(sizeof(struct node));
    if (!temp) {
        printf("Memory overflow\n");
        return;
    }

    temp->val = value;
    temp->link = ptr->link;
    ptr->link = temp;
}

void Delete_Begin() {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }

    struct node *ptr = head;
    head = head->link;
    free(ptr);
}

void Delete_End() {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }

    struct node *ptr = head, *temp = NULL;
    if (head->link == NULL) {
        head = NULL;
    } else {
        while (ptr->link != NULL) {
            temp = ptr;
            ptr = ptr->link;
        }
        temp->link = NULL;
    }
    free(ptr);
}

void Delete_AnyPos() {
    int key;
    printf("Enter the value to delete: ");
    scanf("%d", &key);

    struct node *ptr = head, *temp = NULL;

    if (head == NULL) {
        printf("List is empty\n");
        return;
    }

    if (head->val == key) {
        head = head->link;
        free(ptr);
        return;
    }

    while (ptr != NULL && ptr->val != key) {
        temp = ptr;
        ptr = ptr->link;
    }

    if (ptr == NULL) {
        printf("Value not found\n");
        return;
    }

    temp->link = ptr->link;
    free(ptr);
}

void Display() {
    struct node *ptr = head;
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }

    printf("\nList Elements: ");
    while (ptr != NULL) {
        printf("%d-> ", ptr->val);
        ptr = ptr->link;
    }
    printf("\n");
}

int main() {
    int s = 0;
    char option;

    do {
        printf("\n1: Insertion\n2: Deletion\n3: Display\n4: Exit\nChoice: ");
        scanf("%d", &s);
        switch (s) {
            case 1:
                printf("\nSelect Position\n1: Front\n2: End\n3: Between Nodes\nChoice: ");
                scanf("%d", &s);
                switch (s) {
                    case 1: Insert_Begin(); break;
                    case 2: Insert_End(); break;
                    case 3: Insert_AnyPos(); break;
                    default: printf("Wrong Input\n");
                }
                break;
            case 2:
                printf("\nSelect Position\n1: Front\n2: End\n3: Between Nodes\nChoice: ");
                scanf("%d", &s);
                switch (s) {
                    case 1: Delete_Begin(); break;
                    case 2: Delete_End(); break;
                    case 3: Delete_AnyPos(); break;
                    default: printf("Wrong Input\n");
                }
                break;
            case 3:
                Display();
                break;
            case 4:
                printf("Exited!");
                exit(0);
            default:
                printf("Wrong Choice!");
        }
        printf("\nDo you want to continue? y/n\nChoice: ");
        scanf(" %c", &option);
    } while (option == 'Y' || option == 'y');

    printf("Exited!");
    return 0;
}
